@using ABS_LMS.Models.Security
@model ABS_LMS.Models.EmployeeViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @*<h4>EmployeeViewModel</h4>*@
        <hr />
        @Html.ValidationSummary(false, "", new { @class = "alert alert-warning" })

        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeDetail.EmployeeCode, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.EmployeeDetail.EmployeeCode, new { htmlAttributes = new { @class = "form-control" } })

                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeDetail.FirstName, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.EmployeeDetail.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeDetail.LastName, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.EmployeeDetail.LastName, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeDetail.EmailId, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.EmployeeDetail.EmailId, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeDetail.CompanyEmailId, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.EmployeeDetail.CompanyEmailId, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeDetail.MobileNo, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.EmployeeDetail.MobileNo, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeDetail.Address, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.EmployeeDetail.Address, new { htmlAttributes = new { @class = "form-control", @cols = 80, @rows = 5 } })
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeDetail.DOB, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.EmployeeDetail.DOB, "{0:dd/MM/yyyy}", new { @class = "form-control" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeDetail.DOJ, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.EmployeeDetail.DOJ, "{0:dd/MM/yyyy}", new { @class = "form-control" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeDetail.DepartmentId, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.EmployeeDetail.DepartmentId, Model.DepartmentList, new { @class = "form-control", @onchange = "GetReportingManager();" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeDetail.DesignationId, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.EmployeeDetail.DesignationId, Model.DesignationList, new { @class = "form-control", @onchange = "GetReportingManager();" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeDetail.LeavingDateUTC, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.EmployeeDetail.LeavingDateUTC, "{0:dd/MM/yyyy}", new { @class = "form-control" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeDetail.ConfirmationDateUTC, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.EmployeeDetail.ConfirmationDateUTC, "{0:dd/MM/yyyy}", new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeDetail.PANCard, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.EmployeeDetail.PANCard, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeDetail.AadharId, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.EmployeeDetail.AadharId, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeDetail.Gender, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.EmployeeDetail.Gender, Model.Gender, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeDetail.ReportingManager, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.EmployeeDetail.ReportingManager, Model.ReportingManager, new { @class = "form-control   reportingmanager" })
                </div>
            </div>
        </div>

        <div>
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.EmployeeDetail.EmployeeRole, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.EmployeeDetail.EmployeeRole, Model.RoleType, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group ">
                <div class="col-md-offset-2 col-md-10" style="display: inline-flex;">
                    <input type="submit" value="Save" class="btn btn-default" /> &nbsp; &nbsp;<input type="button" style="@(Model.EmployeeDetail.AspNetUserId.IsEmpty() ? "display:block" : "display:none")" value="Create Portal Account" data-employeeid="@Model.EmployeeDetail.EmployeeId" data-firstname="@Model.EmployeeDetail.FirstName" data-lastname="@Model.EmployeeDetail.LastName" data-username="@Model.EmployeeDetail.CompanyEmailId" class="btn btn-default CreatePortalAccount" />
                    &nbsp; &nbsp;
                    <input type="button" style="@(Model.EmployeeDetail.AspNetUserId.IsEmpty() ? "display:none" : "display:block")" value="Update Role" data-aspnetuserid="@Model.EmployeeDetail.AspNetUserId" class="btn btn-default UpdateRole" />
                </div>
            </div>
        </div>
    </div>
    <div id="divLoading"></div>
    <div class="modal fade" id="modalpopup">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4>Message</h4>
                </div>
                <div class="modal-body">
                    @Html.Label("portal", new { id = "message", @class = "col-md-10 modalpopuplabel" })
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnOK" class="btn modalpopupbtn">Ok</button> &nbsp;&nbsp;
                </div>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", new { id = HttpCurrentUser.EmployeeId })
</div>


@section Scripts {
    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script>
        function GetReportingManager() {
            var url = "/Employee/GetReportingManager/";
            var departmentId = $('#EmployeeDetail_DepartmentId').val();
            var designationId = $('#EmployeeDetail_DesignationId').val();
            $.ajax({
                url: url,
                data: { departmentId: departmentId, designationId: designationId },
                cache: false,
                type: "POST",
                success: function (data) {
                    var markup = "<option value='0'>Reporting Manager</option>";
                    for (var x = 0; x < data.length; x++) {
                        markup += "<option value=" + data[x].Value + ">" + data[x].Text + "</option>";
                    }
                    $(".reportingmanager").html("");
                    $(".reportingmanager").html(markup).show();
                },
                error: function (reponse) {
                    alert("error : " + reponse);
                }
            });

        }
        $(document).ready(function () {
            $('.nav #employee').addClass('active');
            $("#EmployeeDetail_DOJ").datepicker({
                dateFormat: "dd/mm/yy",
                changeMonth: true,
                changeYear: true,
                constrainInput: true
            }).val();
            $("#EmployeeDetail_DOB").datepicker({
                dateFormat: "dd/mm/yy",
                changeMonth: true,
                changeYear: true,
                yearRange: "-100:+0",
                constrainInput: true
            }).val();
            $("#EmployeeDetail_ConfirmationDateUTC").datepicker({
                dateFormat: "dd/mm/yy",
                changeMonth: true,
                changeYear: true,
                constrainInput: true
            }).val();
            $("#EmployeeDetail_LeavingDateUTC").datepicker({
                dateFormat: "dd/mm/yy",
                changeMonth: true,
                changeYear: true,
                constrainInput: true
            }).val();
            $(document)
           .on("click", ".CreatePortalAccount", function () {
               var row = $(this),
                   employeeId = row.data("employeeid"),
                   firstName = row.data("firstname"),
                   lastName = row.data("lastname"),
                   userName = row.data("username"),
                   //userRole = ("#EmployeeDetail_EmployeeRole").text() ;

               userRole = $("#EmployeeDetail_EmployeeRole option:selected").text();
               $("#divLoading").html('<image src="../../Content/Base/images/spinner.gif" alt="processing...."/>').show();
               $.ajax({
                   type: "POST",
                   url: "/Employee/CreatePortalAccount",
                   data: { employeeId: employeeId, firstName: firstName, lastName: lastName, userName: userName, userRole: userRole },
                   dataType: 'json',
                   success: function (response) {
                       if (response) {
                           $("#divLoading").html("").hide();
                           $("#message").text("Portal account created successfully.");
                           $("#modalpopup").modal('show');
                       }
                   },
                   error: function () {
                       $("#divLoading").html("").hide();
                   }
               });
           });

            $("#btnOK").click(function () {
                $("#modalpopup").modal('hide');
                window.location.reload();
            });

            $(document)
              .on("click", ".UpdateRole", function () {
                  var row = $(this),
                  aspNetUserId = row.data("aspnetuserid");
                  var userRole = $("#EmployeeDetail_EmployeeRole :selected").text();
                  $("#divLoading").html('<image src="../../Content/Base/images/spinner.gif" alt="processing...."/>').show();
                  $.ajax({
                      type: "POST",
                      url: "/Employee/UpdateUserRole",
                      data: { aspNetUserId: aspNetUserId, userRole: userRole },
                      dataType: 'json',
                      success: function (response) {
                          if (response) {
                              $("#divLoading").html("").hide();
                              $("message").val("Role updated successfully");
                              $("#modalpopup").modal('show');
                          }
                      },
                      error: function () {
                          $("#divLoading").html("").hide();
                      }
                  });
              });

        });
    </script>

}
